// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_message_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AddQuestion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Answer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Question;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ranking_Player;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SetPlayerName;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Ranking;
}  // namespace protobuf_message_2eproto
namespace message {
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message>
      _instance;
  const ::message::SetPlayerName* set_player_name_;
  const ::message::Ranking* ranking_;
  const ::message::Question* question_;
  const ::message::Answer* answer_;
  const ::message::AddQuestion* add_question_;
} _Message_default_instance_;
class SetPlayerNameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetPlayerName>
      _instance;
} _SetPlayerName_default_instance_;
class Ranking_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ranking_Player>
      _instance;
} _Ranking_Player_default_instance_;
class RankingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ranking>
      _instance;
} _Ranking_default_instance_;
class QuestionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Question>
      _instance;
} _Question_default_instance_;
class AnswerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Answer>
      _instance;
} _Answer_default_instance_;
class AddQuestionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddQuestion>
      _instance;
} _AddQuestion_default_instance_;
}  // namespace message
namespace protobuf_message_2eproto {
static void InitDefaultsMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_Message_default_instance_;
    new (ptr) ::message::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::Message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Message =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsMessage}, {
      &protobuf_message_2eproto::scc_info_SetPlayerName.base,
      &protobuf_message_2eproto::scc_info_Ranking.base,
      &protobuf_message_2eproto::scc_info_Question.base,
      &protobuf_message_2eproto::scc_info_Answer.base,
      &protobuf_message_2eproto::scc_info_AddQuestion.base,}};

static void InitDefaultsSetPlayerName() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_SetPlayerName_default_instance_;
    new (ptr) ::message::SetPlayerName();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::SetPlayerName::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetPlayerName =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetPlayerName}, {}};

static void InitDefaultsRanking_Player() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_Ranking_Player_default_instance_;
    new (ptr) ::message::Ranking_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::Ranking_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ranking_Player =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRanking_Player}, {}};

static void InitDefaultsRanking() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_Ranking_default_instance_;
    new (ptr) ::message::Ranking();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::Ranking::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Ranking =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRanking}, {
      &protobuf_message_2eproto::scc_info_Ranking_Player.base,}};

static void InitDefaultsQuestion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_Question_default_instance_;
    new (ptr) ::message::Question();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::Question::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Question =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQuestion}, {}};

static void InitDefaultsAnswer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_Answer_default_instance_;
    new (ptr) ::message::Answer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::Answer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Answer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAnswer}, {}};

static void InitDefaultsAddQuestion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_AddQuestion_default_instance_;
    new (ptr) ::message::AddQuestion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::AddQuestion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddQuestion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddQuestion}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Message.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetPlayerName.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ranking_Player.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ranking.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Question.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Answer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddQuestion.base);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::message::MessageDefaultTypeInternal, set_player_name_),
  offsetof(::message::MessageDefaultTypeInternal, ranking_),
  offsetof(::message::MessageDefaultTypeInternal, question_),
  offsetof(::message::MessageDefaultTypeInternal, answer_),
  offsetof(::message::MessageDefaultTypeInternal, add_question_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Message, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::SetPlayerName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::SetPlayerName, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Ranking_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Ranking_Player, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Ranking_Player, points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Ranking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Ranking, players_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Question, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Question, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Question, question_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Question, answers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Question, deadline_at_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Answer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Answer, question_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Answer, selected_answer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Answer, sent_at_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::AddQuestion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::AddQuestion, question_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::AddQuestion, answers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::AddQuestion, correct_answer_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::message::Message)},
  { 11, -1, sizeof(::message::SetPlayerName)},
  { 17, -1, sizeof(::message::Ranking_Player)},
  { 24, -1, sizeof(::message::Ranking)},
  { 30, -1, sizeof(::message::Question)},
  { 39, -1, sizeof(::message::Answer)},
  { 47, -1, sizeof(::message::AddQuestion)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::message::_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::message::_SetPlayerName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::message::_Ranking_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::message::_Ranking_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::message::_Question_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::message::_Answer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::message::_AddQuestion_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rmessage.proto\022\007message\"\341\001\n\007Message\0221\n\017"
      "set_player_name\030\001 \001(\0132\026.message.SetPlaye"
      "rNameH\000\022#\n\007ranking\030\002 \001(\0132\020.message.Ranki"
      "ngH\000\022%\n\010question\030\003 \001(\0132\021.message.Questio"
      "nH\000\022!\n\006answer\030\004 \001(\0132\017.message.AnswerH\000\022,"
      "\n\014add_question\030\005 \001(\0132\024.message.AddQuesti"
      "onH\000B\006\n\004type\"\035\n\rSetPlayerName\022\014\n\004name\030\001 "
      "\001(\t\"[\n\007Ranking\022(\n\007players\030\001 \003(\0132\027.messag"
      "e.Ranking.Player\032&\n\006Player\022\014\n\004name\030\001 \001(\t"
      "\022\016\n\006points\030\002 \001(\002\"N\n\010Question\022\n\n\002id\030\001 \001(\004"
      "\022\020\n\010question\030\002 \001(\t\022\017\n\007answers\030\003 \003(\t\022\023\n\013d"
      "eadline_at\030\004 \001(\004\"G\n\006Answer\022\023\n\013question_i"
      "d\030\001 \001(\004\022\027\n\017selected_answer\030\002 \001(\r\022\017\n\007sent"
      "_at\030\003 \001(\004\"H\n\013AddQuestion\022\020\n\010question\030\001 \001"
      "(\t\022\017\n\007answers\030\002 \003(\t\022\026\n\016correct_answer\030\003 "
      "\001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 611);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_message_2eproto
namespace message {

// ===================================================================

void Message::InitAsDefaultInstance() {
  ::message::_Message_default_instance_.set_player_name_ = const_cast< ::message::SetPlayerName*>(
      ::message::SetPlayerName::internal_default_instance());
  ::message::_Message_default_instance_.ranking_ = const_cast< ::message::Ranking*>(
      ::message::Ranking::internal_default_instance());
  ::message::_Message_default_instance_.question_ = const_cast< ::message::Question*>(
      ::message::Question::internal_default_instance());
  ::message::_Message_default_instance_.answer_ = const_cast< ::message::Answer*>(
      ::message::Answer::internal_default_instance());
  ::message::_Message_default_instance_.add_question_ = const_cast< ::message::AddQuestion*>(
      ::message::AddQuestion::internal_default_instance());
}
void Message::set_allocated_set_player_name(::message::SetPlayerName* set_player_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (set_player_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_player_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_player_name, submessage_arena);
    }
    set_has_set_player_name();
    type_.set_player_name_ = set_player_name;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.set_player_name)
}
void Message::set_allocated_ranking(::message::Ranking* ranking) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (ranking) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ranking = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ranking, submessage_arena);
    }
    set_has_ranking();
    type_.ranking_ = ranking;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.ranking)
}
void Message::set_allocated_question(::message::Question* question) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (question) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      question = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, question, submessage_arena);
    }
    set_has_question();
    type_.question_ = question;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.question)
}
void Message::set_allocated_answer(::message::Answer* answer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (answer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      answer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, answer, submessage_arena);
    }
    set_has_answer();
    type_.answer_ = answer;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.answer)
}
void Message::set_allocated_add_question(::message::AddQuestion* add_question) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (add_question) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_question = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_question, submessage_arena);
    }
    set_has_add_question();
    type_.add_question_ = add_question;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.add_question)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kSetPlayerNameFieldNumber;
const int Message::kRankingFieldNumber;
const int Message::kQuestionFieldNumber;
const int Message::kAnswerFieldNumber;
const int Message::kAddQuestionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_Message.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kSetPlayerName: {
      mutable_set_player_name()->::message::SetPlayerName::MergeFrom(from.set_player_name());
      break;
    }
    case kRanking: {
      mutable_ranking()->::message::Ranking::MergeFrom(from.ranking());
      break;
    }
    case kQuestion: {
      mutable_question()->::message::Question::MergeFrom(from.question());
      break;
    }
    case kAnswer: {
      mutable_answer()->::message::Answer::MergeFrom(from.answer());
      break;
    }
    case kAddQuestion: {
      mutable_add_question()->::message::AddQuestion::MergeFrom(from.add_question());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:message.Message)
}

void Message::SharedCtor() {
  clear_has_type();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:message.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_Message.base);
  return *internal_default_instance();
}


void Message::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:message.Message)
  switch (type_case()) {
    case kSetPlayerName: {
      delete type_.set_player_name_;
      break;
    }
    case kRanking: {
      delete type_.ranking_;
      break;
    }
    case kQuestion: {
      delete type_.question_;
      break;
    }
    case kAnswer: {
      delete type_.answer_;
      break;
    }
    case kAddQuestion: {
      delete type_.add_question_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .message.SetPlayerName set_player_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_player_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .message.Ranking ranking = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ranking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .message.Question question = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_question()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .message.Answer answer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_answer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .message.AddQuestion add_question = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_question()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.SetPlayerName set_player_name = 1;
  if (has_set_player_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_set_player_name(), output);
  }

  // .message.Ranking ranking = 2;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_ranking(), output);
  }

  // .message.Question question = 3;
  if (has_question()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_question(), output);
  }

  // .message.Answer answer = 4;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_answer(), output);
  }

  // .message.AddQuestion add_question = 5;
  if (has_add_question()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_add_question(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:message.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:message.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.SetPlayerName set_player_name = 1;
  if (has_set_player_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_set_player_name(), deterministic, target);
  }

  // .message.Ranking ranking = 2;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_ranking(), deterministic, target);
  }

  // .message.Question question = 3;
  if (has_question()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_question(), deterministic, target);
  }

  // .message.Answer answer = 4;
  if (has_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_answer(), deterministic, target);
  }

  // .message.AddQuestion add_question = 5;
  if (has_add_question()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_add_question(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Message)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (type_case()) {
    // .message.SetPlayerName set_player_name = 1;
    case kSetPlayerName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.set_player_name_);
      break;
    }
    // .message.Ranking ranking = 2;
    case kRanking: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.ranking_);
      break;
    }
    // .message.Question question = 3;
    case kQuestion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.question_);
      break;
    }
    // .message.Answer answer = 4;
    case kAnswer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.answer_);
      break;
    }
    // .message.AddQuestion add_question = 5;
    case kAddQuestion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.add_question_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kSetPlayerName: {
      mutable_set_player_name()->::message::SetPlayerName::MergeFrom(from.set_player_name());
      break;
    }
    case kRanking: {
      mutable_ranking()->::message::Ranking::MergeFrom(from.ranking());
      break;
    }
    case kQuestion: {
      mutable_question()->::message::Question::MergeFrom(from.question());
      break;
    }
    case kAnswer: {
      mutable_answer()->::message::Answer::MergeFrom(from.answer());
      break;
    }
    case kAddQuestion: {
      mutable_add_question()->::message::AddQuestion::MergeFrom(from.add_question());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetPlayerName::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetPlayerName::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetPlayerName::SetPlayerName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_SetPlayerName.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.SetPlayerName)
}
SetPlayerName::SetPlayerName(const SetPlayerName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:message.SetPlayerName)
}

void SetPlayerName::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SetPlayerName::~SetPlayerName() {
  // @@protoc_insertion_point(destructor:message.SetPlayerName)
  SharedDtor();
}

void SetPlayerName::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetPlayerName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetPlayerName::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetPlayerName& SetPlayerName::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_SetPlayerName.base);
  return *internal_default_instance();
}


void SetPlayerName::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SetPlayerName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SetPlayerName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.SetPlayerName)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.SetPlayerName.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.SetPlayerName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.SetPlayerName)
  return false;
#undef DO_
}

void SetPlayerName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.SetPlayerName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.SetPlayerName.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:message.SetPlayerName)
}

::google::protobuf::uint8* SetPlayerName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:message.SetPlayerName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.SetPlayerName.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SetPlayerName)
  return target;
}

size_t SetPlayerName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SetPlayerName)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPlayerName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.SetPlayerName)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPlayerName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetPlayerName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.SetPlayerName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.SetPlayerName)
    MergeFrom(*source);
  }
}

void SetPlayerName::MergeFrom(const SetPlayerName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.SetPlayerName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SetPlayerName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.SetPlayerName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPlayerName::CopyFrom(const SetPlayerName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SetPlayerName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPlayerName::IsInitialized() const {
  return true;
}

void SetPlayerName::Swap(SetPlayerName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetPlayerName::InternalSwap(SetPlayerName* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetPlayerName::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ranking_Player::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ranking_Player::kNameFieldNumber;
const int Ranking_Player::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ranking_Player::Ranking_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_Ranking_Player.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Ranking.Player)
}
Ranking_Player::Ranking_Player(const Ranking_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  points_ = from.points_;
  // @@protoc_insertion_point(copy_constructor:message.Ranking.Player)
}

void Ranking_Player::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  points_ = 0;
}

Ranking_Player::~Ranking_Player() {
  // @@protoc_insertion_point(destructor:message.Ranking.Player)
  SharedDtor();
}

void Ranking_Player::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Ranking_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ranking_Player::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ranking_Player& Ranking_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_Ranking_Player.base);
  return *internal_default_instance();
}


void Ranking_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Ranking.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  points_ = 0;
  _internal_metadata_.Clear();
}

bool Ranking_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Ranking.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.Ranking.Player.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Ranking.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Ranking.Player)
  return false;
#undef DO_
}

void Ranking_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Ranking.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.Ranking.Player.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // float points = 2;
  if (this->points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->points(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:message.Ranking.Player)
}

::google::protobuf::uint8* Ranking_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:message.Ranking.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.Ranking.Player.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // float points = 2;
  if (this->points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->points(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Ranking.Player)
  return target;
}

size_t Ranking_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Ranking.Player)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // float points = 2;
  if (this->points() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ranking_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.Ranking.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Ranking_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ranking_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.Ranking.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.Ranking.Player)
    MergeFrom(*source);
  }
}

void Ranking_Player::MergeFrom(const Ranking_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.Ranking.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.points() != 0) {
    set_points(from.points());
  }
}

void Ranking_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.Ranking.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ranking_Player::CopyFrom(const Ranking_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Ranking.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ranking_Player::IsInitialized() const {
  return true;
}

void Ranking_Player::Swap(Ranking_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ranking_Player::InternalSwap(Ranking_Player* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(points_, other->points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ranking_Player::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ranking::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ranking::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ranking::Ranking()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_Ranking.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Ranking)
}
Ranking::Ranking(const Ranking& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.Ranking)
}

void Ranking::SharedCtor() {
}

Ranking::~Ranking() {
  // @@protoc_insertion_point(destructor:message.Ranking)
  SharedDtor();
}

void Ranking::SharedDtor() {
}

void Ranking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ranking::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ranking& Ranking::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_Ranking.base);
  return *internal_default_instance();
}


void Ranking::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Ranking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear();
}

bool Ranking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Ranking)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.Ranking.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Ranking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Ranking)
  return false;
#undef DO_
}

void Ranking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Ranking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.Ranking.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->players(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:message.Ranking)
}

::google::protobuf::uint8* Ranking::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:message.Ranking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.Ranking.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Ranking)
  return target;
}

size_t Ranking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Ranking)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .message.Ranking.Player players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ranking::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.Ranking)
  GOOGLE_DCHECK_NE(&from, this);
  const Ranking* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ranking>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.Ranking)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.Ranking)
    MergeFrom(*source);
  }
}

void Ranking::MergeFrom(const Ranking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.Ranking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void Ranking::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.Ranking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ranking::CopyFrom(const Ranking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Ranking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ranking::IsInitialized() const {
  return true;
}

void Ranking::Swap(Ranking* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ranking::InternalSwap(Ranking* other) {
  using std::swap;
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ranking::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Question::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Question::kIdFieldNumber;
const int Question::kQuestionFieldNumber;
const int Question::kAnswersFieldNumber;
const int Question::kDeadlineAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Question::Question()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_Question.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Question)
}
Question::Question(const Question& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      answers_(from.answers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.question().size() > 0) {
    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&deadline_at_) -
    reinterpret_cast<char*>(&id_)) + sizeof(deadline_at_));
  // @@protoc_insertion_point(copy_constructor:message.Question)
}

void Question::SharedCtor() {
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deadline_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(deadline_at_));
}

Question::~Question() {
  // @@protoc_insertion_point(destructor:message.Question)
  SharedDtor();
}

void Question::SharedDtor() {
  question_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Question::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Question::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Question& Question::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_Question.base);
  return *internal_default_instance();
}


void Question::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answers_.Clear();
  question_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deadline_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(deadline_at_));
  _internal_metadata_.Clear();
}

bool Question::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Question)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string question = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->question().data(), static_cast<int>(this->question().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.Question.question"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string answers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_answers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->answers(this->answers_size() - 1).data(),
            static_cast<int>(this->answers(this->answers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.Question.answers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 deadline_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deadline_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Question)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Question)
  return false;
#undef DO_
}

void Question::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // string question = 2;
  if (this->question().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->question().data(), static_cast<int>(this->question().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.Question.question");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->question(), output);
  }

  // repeated string answers = 3;
  for (int i = 0, n = this->answers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->answers(i).data(), static_cast<int>(this->answers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.Question.answers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->answers(i), output);
  }

  // uint64 deadline_at = 4;
  if (this->deadline_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->deadline_at(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:message.Question)
}

::google::protobuf::uint8* Question::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:message.Question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // string question = 2;
  if (this->question().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->question().data(), static_cast<int>(this->question().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.Question.question");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->question(), target);
  }

  // repeated string answers = 3;
  for (int i = 0, n = this->answers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->answers(i).data(), static_cast<int>(this->answers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.Question.answers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->answers(i), target);
  }

  // uint64 deadline_at = 4;
  if (this->deadline_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->deadline_at(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Question)
  return target;
}

size_t Question::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Question)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string answers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->answers_size());
  for (int i = 0, n = this->answers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->answers(i));
  }

  // string question = 2;
  if (this->question().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->question());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 deadline_at = 4;
  if (this->deadline_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->deadline_at());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Question::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.Question)
  GOOGLE_DCHECK_NE(&from, this);
  const Question* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Question>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.Question)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.Question)
    MergeFrom(*source);
  }
}

void Question::MergeFrom(const Question& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.Question)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  answers_.MergeFrom(from.answers_);
  if (from.question().size() > 0) {

    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.deadline_at() != 0) {
    set_deadline_at(from.deadline_at());
  }
}

void Question::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.Question)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Question::CopyFrom(const Question& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Question)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Question::IsInitialized() const {
  return true;
}

void Question::Swap(Question* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Question::InternalSwap(Question* other) {
  using std::swap;
  answers_.InternalSwap(CastToBase(&other->answers_));
  question_.Swap(&other->question_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(deadline_at_, other->deadline_at_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Question::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Answer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Answer::kQuestionIdFieldNumber;
const int Answer::kSelectedAnswerFieldNumber;
const int Answer::kSentAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Answer::Answer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_Answer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Answer)
}
Answer::Answer(const Answer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&question_id_, &from.question_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&selected_answer_) -
    reinterpret_cast<char*>(&question_id_)) + sizeof(selected_answer_));
  // @@protoc_insertion_point(copy_constructor:message.Answer)
}

void Answer::SharedCtor() {
  ::memset(&question_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selected_answer_) -
      reinterpret_cast<char*>(&question_id_)) + sizeof(selected_answer_));
}

Answer::~Answer() {
  // @@protoc_insertion_point(destructor:message.Answer)
  SharedDtor();
}

void Answer::SharedDtor() {
}

void Answer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Answer::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Answer& Answer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_Answer.base);
  return *internal_default_instance();
}


void Answer::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&question_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selected_answer_) -
      reinterpret_cast<char*>(&question_id_)) + sizeof(selected_answer_));
  _internal_metadata_.Clear();
}

bool Answer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Answer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 question_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &question_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 selected_answer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selected_answer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sent_at = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sent_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Answer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Answer)
  return false;
#undef DO_
}

void Answer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 question_id = 1;
  if (this->question_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->question_id(), output);
  }

  // uint32 selected_answer = 2;
  if (this->selected_answer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selected_answer(), output);
  }

  // uint64 sent_at = 3;
  if (this->sent_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sent_at(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:message.Answer)
}

::google::protobuf::uint8* Answer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:message.Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 question_id = 1;
  if (this->question_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->question_id(), target);
  }

  // uint32 selected_answer = 2;
  if (this->selected_answer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selected_answer(), target);
  }

  // uint64 sent_at = 3;
  if (this->sent_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sent_at(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Answer)
  return target;
}

size_t Answer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Answer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 question_id = 1;
  if (this->question_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->question_id());
  }

  // uint64 sent_at = 3;
  if (this->sent_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sent_at());
  }

  // uint32 selected_answer = 2;
  if (this->selected_answer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selected_answer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Answer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.Answer)
  GOOGLE_DCHECK_NE(&from, this);
  const Answer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Answer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.Answer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.Answer)
    MergeFrom(*source);
  }
}

void Answer::MergeFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.Answer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.question_id() != 0) {
    set_question_id(from.question_id());
  }
  if (from.sent_at() != 0) {
    set_sent_at(from.sent_at());
  }
  if (from.selected_answer() != 0) {
    set_selected_answer(from.selected_answer());
  }
}

void Answer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Answer::CopyFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Answer::IsInitialized() const {
  return true;
}

void Answer::Swap(Answer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Answer::InternalSwap(Answer* other) {
  using std::swap;
  swap(question_id_, other->question_id_);
  swap(sent_at_, other->sent_at_);
  swap(selected_answer_, other->selected_answer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Answer::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddQuestion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddQuestion::kQuestionFieldNumber;
const int AddQuestion::kAnswersFieldNumber;
const int AddQuestion::kCorrectAnswerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddQuestion::AddQuestion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_AddQuestion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.AddQuestion)
}
AddQuestion::AddQuestion(const AddQuestion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      answers_(from.answers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.question().size() > 0) {
    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  correct_answer_ = from.correct_answer_;
  // @@protoc_insertion_point(copy_constructor:message.AddQuestion)
}

void AddQuestion::SharedCtor() {
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  correct_answer_ = 0u;
}

AddQuestion::~AddQuestion() {
  // @@protoc_insertion_point(destructor:message.AddQuestion)
  SharedDtor();
}

void AddQuestion::SharedDtor() {
  question_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddQuestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddQuestion::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddQuestion& AddQuestion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_AddQuestion.base);
  return *internal_default_instance();
}


void AddQuestion::Clear() {
// @@protoc_insertion_point(message_clear_start:message.AddQuestion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answers_.Clear();
  question_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  correct_answer_ = 0u;
  _internal_metadata_.Clear();
}

bool AddQuestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.AddQuestion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string question = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->question().data(), static_cast<int>(this->question().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.AddQuestion.question"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string answers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_answers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->answers(this->answers_size() - 1).data(),
            static_cast<int>(this->answers(this->answers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.AddQuestion.answers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 correct_answer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &correct_answer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.AddQuestion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.AddQuestion)
  return false;
#undef DO_
}

void AddQuestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.AddQuestion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string question = 1;
  if (this->question().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->question().data(), static_cast<int>(this->question().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.AddQuestion.question");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->question(), output);
  }

  // repeated string answers = 2;
  for (int i = 0, n = this->answers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->answers(i).data(), static_cast<int>(this->answers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.AddQuestion.answers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->answers(i), output);
  }

  // uint32 correct_answer = 3;
  if (this->correct_answer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->correct_answer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:message.AddQuestion)
}

::google::protobuf::uint8* AddQuestion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:message.AddQuestion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string question = 1;
  if (this->question().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->question().data(), static_cast<int>(this->question().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.AddQuestion.question");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->question(), target);
  }

  // repeated string answers = 2;
  for (int i = 0, n = this->answers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->answers(i).data(), static_cast<int>(this->answers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.AddQuestion.answers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->answers(i), target);
  }

  // uint32 correct_answer = 3;
  if (this->correct_answer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->correct_answer(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.AddQuestion)
  return target;
}

size_t AddQuestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.AddQuestion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string answers = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->answers_size());
  for (int i = 0, n = this->answers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->answers(i));
  }

  // string question = 1;
  if (this->question().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->question());
  }

  // uint32 correct_answer = 3;
  if (this->correct_answer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->correct_answer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddQuestion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.AddQuestion)
  GOOGLE_DCHECK_NE(&from, this);
  const AddQuestion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddQuestion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.AddQuestion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.AddQuestion)
    MergeFrom(*source);
  }
}

void AddQuestion::MergeFrom(const AddQuestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.AddQuestion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  answers_.MergeFrom(from.answers_);
  if (from.question().size() > 0) {

    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  if (from.correct_answer() != 0) {
    set_correct_answer(from.correct_answer());
  }
}

void AddQuestion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.AddQuestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddQuestion::CopyFrom(const AddQuestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.AddQuestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddQuestion::IsInitialized() const {
  return true;
}

void AddQuestion::Swap(AddQuestion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddQuestion::InternalSwap(AddQuestion* other) {
  using std::swap;
  answers_.InternalSwap(CastToBase(&other->answers_));
  question_.Swap(&other->question_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(correct_answer_, other->correct_answer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddQuestion::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::message::Message* Arena::CreateMaybeMessage< ::message::Message >(Arena* arena) {
  return Arena::CreateInternal< ::message::Message >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::message::SetPlayerName* Arena::CreateMaybeMessage< ::message::SetPlayerName >(Arena* arena) {
  return Arena::CreateInternal< ::message::SetPlayerName >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::message::Ranking_Player* Arena::CreateMaybeMessage< ::message::Ranking_Player >(Arena* arena) {
  return Arena::CreateInternal< ::message::Ranking_Player >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::message::Ranking* Arena::CreateMaybeMessage< ::message::Ranking >(Arena* arena) {
  return Arena::CreateInternal< ::message::Ranking >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::message::Question* Arena::CreateMaybeMessage< ::message::Question >(Arena* arena) {
  return Arena::CreateInternal< ::message::Question >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::message::Answer* Arena::CreateMaybeMessage< ::message::Answer >(Arena* arena) {
  return Arena::CreateInternal< ::message::Answer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::message::AddQuestion* Arena::CreateMaybeMessage< ::message::AddQuestion >(Arena* arena) {
  return Arena::CreateInternal< ::message::AddQuestion >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
