// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_INCLUDED_message_2eproto
#define PROTOBUF_INCLUDED_message_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto 

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_message_2eproto
namespace message {
class Answer;
class AnswerDefaultTypeInternal;
extern AnswerDefaultTypeInternal _Answer_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Question;
class QuestionDefaultTypeInternal;
extern QuestionDefaultTypeInternal _Question_default_instance_;
class Ranking;
class RankingDefaultTypeInternal;
extern RankingDefaultTypeInternal _Ranking_default_instance_;
class Ranking_Player;
class Ranking_PlayerDefaultTypeInternal;
extern Ranking_PlayerDefaultTypeInternal _Ranking_Player_default_instance_;
class SetPlayerName;
class SetPlayerNameDefaultTypeInternal;
extern SetPlayerNameDefaultTypeInternal _SetPlayerName_default_instance_;
}  // namespace message
namespace google {
namespace protobuf {
template<> ::message::Answer* Arena::CreateMaybeMessage<::message::Answer>(Arena*);
template<> ::message::Message* Arena::CreateMaybeMessage<::message::Message>(Arena*);
template<> ::message::Question* Arena::CreateMaybeMessage<::message::Question>(Arena*);
template<> ::message::Ranking* Arena::CreateMaybeMessage<::message::Ranking>(Arena*);
template<> ::message::Ranking_Player* Arena::CreateMaybeMessage<::message::Ranking_Player>(Arena*);
template<> ::message::SetPlayerName* Arena::CreateMaybeMessage<::message::SetPlayerName>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace message {

// ===================================================================

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  enum TypeCase {
    kSetPlayerName = 1,
    kRanking = 2,
    kQuestion = 3,
    kAnswer = 4,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .message.SetPlayerName set_player_name = 1;
  bool has_set_player_name() const;
  void clear_set_player_name();
  static const int kSetPlayerNameFieldNumber = 1;
  private:
  const ::message::SetPlayerName& _internal_set_player_name() const;
  public:
  const ::message::SetPlayerName& set_player_name() const;
  ::message::SetPlayerName* release_set_player_name();
  ::message::SetPlayerName* mutable_set_player_name();
  void set_allocated_set_player_name(::message::SetPlayerName* set_player_name);

  // .message.Ranking ranking = 2;
  bool has_ranking() const;
  void clear_ranking();
  static const int kRankingFieldNumber = 2;
  private:
  const ::message::Ranking& _internal_ranking() const;
  public:
  const ::message::Ranking& ranking() const;
  ::message::Ranking* release_ranking();
  ::message::Ranking* mutable_ranking();
  void set_allocated_ranking(::message::Ranking* ranking);

  // .message.Question question = 3;
  bool has_question() const;
  void clear_question();
  static const int kQuestionFieldNumber = 3;
  private:
  const ::message::Question& _internal_question() const;
  public:
  const ::message::Question& question() const;
  ::message::Question* release_question();
  ::message::Question* mutable_question();
  void set_allocated_question(::message::Question* question);

  // .message.Answer answer = 4;
  bool has_answer() const;
  void clear_answer();
  static const int kAnswerFieldNumber = 4;
  private:
  const ::message::Answer& _internal_answer() const;
  public:
  const ::message::Answer& answer() const;
  ::message::Answer* release_answer();
  ::message::Answer* mutable_answer();
  void set_allocated_answer(::message::Answer* answer);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:message.Message)
 private:
  void set_has_set_player_name();
  void set_has_ranking();
  void set_has_question();
  void set_has_answer();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::message::SetPlayerName* set_player_name_;
    ::message::Ranking* ranking_;
    ::message::Question* question_;
    ::message::Answer* answer_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetPlayerName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.SetPlayerName) */ {
 public:
  SetPlayerName();
  virtual ~SetPlayerName();

  SetPlayerName(const SetPlayerName& from);

  inline SetPlayerName& operator=(const SetPlayerName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetPlayerName(SetPlayerName&& from) noexcept
    : SetPlayerName() {
    *this = ::std::move(from);
  }

  inline SetPlayerName& operator=(SetPlayerName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPlayerName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPlayerName* internal_default_instance() {
    return reinterpret_cast<const SetPlayerName*>(
               &_SetPlayerName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SetPlayerName* other);
  friend void swap(SetPlayerName& a, SetPlayerName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetPlayerName* New() const final {
    return CreateMaybeMessage<SetPlayerName>(NULL);
  }

  SetPlayerName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetPlayerName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetPlayerName& from);
  void MergeFrom(const SetPlayerName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPlayerName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:message.SetPlayerName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ranking_Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Ranking.Player) */ {
 public:
  Ranking_Player();
  virtual ~Ranking_Player();

  Ranking_Player(const Ranking_Player& from);

  inline Ranking_Player& operator=(const Ranking_Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ranking_Player(Ranking_Player&& from) noexcept
    : Ranking_Player() {
    *this = ::std::move(from);
  }

  inline Ranking_Player& operator=(Ranking_Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ranking_Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ranking_Player* internal_default_instance() {
    return reinterpret_cast<const Ranking_Player*>(
               &_Ranking_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Ranking_Player* other);
  friend void swap(Ranking_Player& a, Ranking_Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ranking_Player* New() const final {
    return CreateMaybeMessage<Ranking_Player>(NULL);
  }

  Ranking_Player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ranking_Player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ranking_Player& from);
  void MergeFrom(const Ranking_Player& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ranking_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // float points = 2;
  void clear_points();
  static const int kPointsFieldNumber = 2;
  float points() const;
  void set_points(float value);

  // @@protoc_insertion_point(class_scope:message.Ranking.Player)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float points_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ranking : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Ranking) */ {
 public:
  Ranking();
  virtual ~Ranking();

  Ranking(const Ranking& from);

  inline Ranking& operator=(const Ranking& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ranking(Ranking&& from) noexcept
    : Ranking() {
    *this = ::std::move(from);
  }

  inline Ranking& operator=(Ranking&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ranking& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ranking* internal_default_instance() {
    return reinterpret_cast<const Ranking*>(
               &_Ranking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Ranking* other);
  friend void swap(Ranking& a, Ranking& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ranking* New() const final {
    return CreateMaybeMessage<Ranking>(NULL);
  }

  Ranking* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ranking>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ranking& from);
  void MergeFrom(const Ranking& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ranking* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Ranking_Player Player;

  // accessors -------------------------------------------------------

  // repeated .message.Ranking.Player players = 1;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 1;
  ::message::Ranking_Player* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::message::Ranking_Player >*
      mutable_players();
  const ::message::Ranking_Player& players(int index) const;
  ::message::Ranking_Player* add_players();
  const ::google::protobuf::RepeatedPtrField< ::message::Ranking_Player >&
      players() const;

  // @@protoc_insertion_point(class_scope:message.Ranking)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::message::Ranking_Player > players_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Question : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Question) */ {
 public:
  Question();
  virtual ~Question();

  Question(const Question& from);

  inline Question& operator=(const Question& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Question(Question&& from) noexcept
    : Question() {
    *this = ::std::move(from);
  }

  inline Question& operator=(Question&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Question& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Question* internal_default_instance() {
    return reinterpret_cast<const Question*>(
               &_Question_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Question* other);
  friend void swap(Question& a, Question& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Question* New() const final {
    return CreateMaybeMessage<Question>(NULL);
  }

  Question* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Question>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Question& from);
  void MergeFrom(const Question& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Question* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string answers = 3;
  int answers_size() const;
  void clear_answers();
  static const int kAnswersFieldNumber = 3;
  const ::std::string& answers(int index) const;
  ::std::string* mutable_answers(int index);
  void set_answers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_answers(int index, ::std::string&& value);
  #endif
  void set_answers(int index, const char* value);
  void set_answers(int index, const char* value, size_t size);
  ::std::string* add_answers();
  void add_answers(const ::std::string& value);
  #if LANG_CXX11
  void add_answers(::std::string&& value);
  #endif
  void add_answers(const char* value);
  void add_answers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& answers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_answers();

  // string question = 2;
  void clear_question();
  static const int kQuestionFieldNumber = 2;
  const ::std::string& question() const;
  void set_question(const ::std::string& value);
  #if LANG_CXX11
  void set_question(::std::string&& value);
  #endif
  void set_question(const char* value);
  void set_question(const char* value, size_t size);
  ::std::string* mutable_question();
  ::std::string* release_question();
  void set_allocated_question(::std::string* question);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 deadline_at = 4;
  void clear_deadline_at();
  static const int kDeadlineAtFieldNumber = 4;
  ::google::protobuf::uint64 deadline_at() const;
  void set_deadline_at(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:message.Question)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> answers_;
  ::google::protobuf::internal::ArenaStringPtr question_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 deadline_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Answer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Answer) */ {
 public:
  Answer();
  virtual ~Answer();

  Answer(const Answer& from);

  inline Answer& operator=(const Answer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Answer(Answer&& from) noexcept
    : Answer() {
    *this = ::std::move(from);
  }

  inline Answer& operator=(Answer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Answer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Answer* internal_default_instance() {
    return reinterpret_cast<const Answer*>(
               &_Answer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Answer* other);
  friend void swap(Answer& a, Answer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Answer* New() const final {
    return CreateMaybeMessage<Answer>(NULL);
  }

  Answer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Answer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Answer& from);
  void MergeFrom(const Answer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Answer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 question_id = 1;
  void clear_question_id();
  static const int kQuestionIdFieldNumber = 1;
  ::google::protobuf::uint64 question_id() const;
  void set_question_id(::google::protobuf::uint64 value);

  // uint64 sent_at = 3;
  void clear_sent_at();
  static const int kSentAtFieldNumber = 3;
  ::google::protobuf::uint64 sent_at() const;
  void set_sent_at(::google::protobuf::uint64 value);

  // uint32 selected_answer = 2;
  void clear_selected_answer();
  static const int kSelectedAnswerFieldNumber = 2;
  ::google::protobuf::uint32 selected_answer() const;
  void set_selected_answer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.Answer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 question_id_;
  ::google::protobuf::uint64 sent_at_;
  ::google::protobuf::uint32 selected_answer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// .message.SetPlayerName set_player_name = 1;
inline bool Message::has_set_player_name() const {
  return type_case() == kSetPlayerName;
}
inline void Message::set_has_set_player_name() {
  _oneof_case_[0] = kSetPlayerName;
}
inline void Message::clear_set_player_name() {
  if (has_set_player_name()) {
    delete type_.set_player_name_;
    clear_has_type();
  }
}
inline const ::message::SetPlayerName& Message::_internal_set_player_name() const {
  return *type_.set_player_name_;
}
inline ::message::SetPlayerName* Message::release_set_player_name() {
  // @@protoc_insertion_point(field_release:message.Message.set_player_name)
  if (has_set_player_name()) {
    clear_has_type();
      ::message::SetPlayerName* temp = type_.set_player_name_;
    type_.set_player_name_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::message::SetPlayerName& Message::set_player_name() const {
  // @@protoc_insertion_point(field_get:message.Message.set_player_name)
  return has_set_player_name()
      ? *type_.set_player_name_
      : *reinterpret_cast< ::message::SetPlayerName*>(&::message::_SetPlayerName_default_instance_);
}
inline ::message::SetPlayerName* Message::mutable_set_player_name() {
  if (!has_set_player_name()) {
    clear_type();
    set_has_set_player_name();
    type_.set_player_name_ = CreateMaybeMessage< ::message::SetPlayerName >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:message.Message.set_player_name)
  return type_.set_player_name_;
}

// .message.Ranking ranking = 2;
inline bool Message::has_ranking() const {
  return type_case() == kRanking;
}
inline void Message::set_has_ranking() {
  _oneof_case_[0] = kRanking;
}
inline void Message::clear_ranking() {
  if (has_ranking()) {
    delete type_.ranking_;
    clear_has_type();
  }
}
inline const ::message::Ranking& Message::_internal_ranking() const {
  return *type_.ranking_;
}
inline ::message::Ranking* Message::release_ranking() {
  // @@protoc_insertion_point(field_release:message.Message.ranking)
  if (has_ranking()) {
    clear_has_type();
      ::message::Ranking* temp = type_.ranking_;
    type_.ranking_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::message::Ranking& Message::ranking() const {
  // @@protoc_insertion_point(field_get:message.Message.ranking)
  return has_ranking()
      ? *type_.ranking_
      : *reinterpret_cast< ::message::Ranking*>(&::message::_Ranking_default_instance_);
}
inline ::message::Ranking* Message::mutable_ranking() {
  if (!has_ranking()) {
    clear_type();
    set_has_ranking();
    type_.ranking_ = CreateMaybeMessage< ::message::Ranking >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:message.Message.ranking)
  return type_.ranking_;
}

// .message.Question question = 3;
inline bool Message::has_question() const {
  return type_case() == kQuestion;
}
inline void Message::set_has_question() {
  _oneof_case_[0] = kQuestion;
}
inline void Message::clear_question() {
  if (has_question()) {
    delete type_.question_;
    clear_has_type();
  }
}
inline const ::message::Question& Message::_internal_question() const {
  return *type_.question_;
}
inline ::message::Question* Message::release_question() {
  // @@protoc_insertion_point(field_release:message.Message.question)
  if (has_question()) {
    clear_has_type();
      ::message::Question* temp = type_.question_;
    type_.question_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::message::Question& Message::question() const {
  // @@protoc_insertion_point(field_get:message.Message.question)
  return has_question()
      ? *type_.question_
      : *reinterpret_cast< ::message::Question*>(&::message::_Question_default_instance_);
}
inline ::message::Question* Message::mutable_question() {
  if (!has_question()) {
    clear_type();
    set_has_question();
    type_.question_ = CreateMaybeMessage< ::message::Question >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:message.Message.question)
  return type_.question_;
}

// .message.Answer answer = 4;
inline bool Message::has_answer() const {
  return type_case() == kAnswer;
}
inline void Message::set_has_answer() {
  _oneof_case_[0] = kAnswer;
}
inline void Message::clear_answer() {
  if (has_answer()) {
    delete type_.answer_;
    clear_has_type();
  }
}
inline const ::message::Answer& Message::_internal_answer() const {
  return *type_.answer_;
}
inline ::message::Answer* Message::release_answer() {
  // @@protoc_insertion_point(field_release:message.Message.answer)
  if (has_answer()) {
    clear_has_type();
      ::message::Answer* temp = type_.answer_;
    type_.answer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::message::Answer& Message::answer() const {
  // @@protoc_insertion_point(field_get:message.Message.answer)
  return has_answer()
      ? *type_.answer_
      : *reinterpret_cast< ::message::Answer*>(&::message::_Answer_default_instance_);
}
inline ::message::Answer* Message::mutable_answer() {
  if (!has_answer()) {
    clear_type();
    set_has_answer();
    type_.answer_ = CreateMaybeMessage< ::message::Answer >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:message.Message.answer)
  return type_.answer_;
}

inline bool Message::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Message::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Message::TypeCase Message::type_case() const {
  return Message::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SetPlayerName

// string name = 1;
inline void SetPlayerName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetPlayerName::name() const {
  // @@protoc_insertion_point(field_get:message.SetPlayerName.name)
  return name_.GetNoArena();
}
inline void SetPlayerName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.SetPlayerName.name)
}
#if LANG_CXX11
inline void SetPlayerName::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.SetPlayerName.name)
}
#endif
inline void SetPlayerName::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.SetPlayerName.name)
}
inline void SetPlayerName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.SetPlayerName.name)
}
inline ::std::string* SetPlayerName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:message.SetPlayerName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetPlayerName::release_name() {
  // @@protoc_insertion_point(field_release:message.SetPlayerName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetPlayerName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:message.SetPlayerName.name)
}

// -------------------------------------------------------------------

// Ranking_Player

// string name = 1;
inline void Ranking_Player::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ranking_Player::name() const {
  // @@protoc_insertion_point(field_get:message.Ranking.Player.name)
  return name_.GetNoArena();
}
inline void Ranking_Player::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Ranking.Player.name)
}
#if LANG_CXX11
inline void Ranking_Player::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.Ranking.Player.name)
}
#endif
inline void Ranking_Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Ranking.Player.name)
}
inline void Ranking_Player::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Ranking.Player.name)
}
inline ::std::string* Ranking_Player::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:message.Ranking.Player.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ranking_Player::release_name() {
  // @@protoc_insertion_point(field_release:message.Ranking.Player.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ranking_Player::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:message.Ranking.Player.name)
}

// float points = 2;
inline void Ranking_Player::clear_points() {
  points_ = 0;
}
inline float Ranking_Player::points() const {
  // @@protoc_insertion_point(field_get:message.Ranking.Player.points)
  return points_;
}
inline void Ranking_Player::set_points(float value) {
  
  points_ = value;
  // @@protoc_insertion_point(field_set:message.Ranking.Player.points)
}

// -------------------------------------------------------------------

// Ranking

// repeated .message.Ranking.Player players = 1;
inline int Ranking::players_size() const {
  return players_.size();
}
inline void Ranking::clear_players() {
  players_.Clear();
}
inline ::message::Ranking_Player* Ranking::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:message.Ranking.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::message::Ranking_Player >*
Ranking::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:message.Ranking.players)
  return &players_;
}
inline const ::message::Ranking_Player& Ranking::players(int index) const {
  // @@protoc_insertion_point(field_get:message.Ranking.players)
  return players_.Get(index);
}
inline ::message::Ranking_Player* Ranking::add_players() {
  // @@protoc_insertion_point(field_add:message.Ranking.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::Ranking_Player >&
Ranking::players() const {
  // @@protoc_insertion_point(field_list:message.Ranking.players)
  return players_;
}

// -------------------------------------------------------------------

// Question

// uint64 id = 1;
inline void Question::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Question::id() const {
  // @@protoc_insertion_point(field_get:message.Question.id)
  return id_;
}
inline void Question::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:message.Question.id)
}

// string question = 2;
inline void Question::clear_question() {
  question_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Question::question() const {
  // @@protoc_insertion_point(field_get:message.Question.question)
  return question_.GetNoArena();
}
inline void Question::set_question(const ::std::string& value) {
  
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Question.question)
}
#if LANG_CXX11
inline void Question::set_question(::std::string&& value) {
  
  question_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.Question.question)
}
#endif
inline void Question::set_question(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Question.question)
}
inline void Question::set_question(const char* value, size_t size) {
  
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Question.question)
}
inline ::std::string* Question::mutable_question() {
  
  // @@protoc_insertion_point(field_mutable:message.Question.question)
  return question_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Question::release_question() {
  // @@protoc_insertion_point(field_release:message.Question.question)
  
  return question_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Question::set_allocated_question(::std::string* question) {
  if (question != NULL) {
    
  } else {
    
  }
  question_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), question);
  // @@protoc_insertion_point(field_set_allocated:message.Question.question)
}

// repeated string answers = 3;
inline int Question::answers_size() const {
  return answers_.size();
}
inline void Question::clear_answers() {
  answers_.Clear();
}
inline const ::std::string& Question::answers(int index) const {
  // @@protoc_insertion_point(field_get:message.Question.answers)
  return answers_.Get(index);
}
inline ::std::string* Question::mutable_answers(int index) {
  // @@protoc_insertion_point(field_mutable:message.Question.answers)
  return answers_.Mutable(index);
}
inline void Question::set_answers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:message.Question.answers)
  answers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Question::set_answers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:message.Question.answers)
  answers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Question::set_answers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  answers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.Question.answers)
}
inline void Question::set_answers(int index, const char* value, size_t size) {
  answers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.Question.answers)
}
inline ::std::string* Question::add_answers() {
  // @@protoc_insertion_point(field_add_mutable:message.Question.answers)
  return answers_.Add();
}
inline void Question::add_answers(const ::std::string& value) {
  answers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.Question.answers)
}
#if LANG_CXX11
inline void Question::add_answers(::std::string&& value) {
  answers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.Question.answers)
}
#endif
inline void Question::add_answers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  answers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.Question.answers)
}
inline void Question::add_answers(const char* value, size_t size) {
  answers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.Question.answers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Question::answers() const {
  // @@protoc_insertion_point(field_list:message.Question.answers)
  return answers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Question::mutable_answers() {
  // @@protoc_insertion_point(field_mutable_list:message.Question.answers)
  return &answers_;
}

// uint64 deadline_at = 4;
inline void Question::clear_deadline_at() {
  deadline_at_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Question::deadline_at() const {
  // @@protoc_insertion_point(field_get:message.Question.deadline_at)
  return deadline_at_;
}
inline void Question::set_deadline_at(::google::protobuf::uint64 value) {
  
  deadline_at_ = value;
  // @@protoc_insertion_point(field_set:message.Question.deadline_at)
}

// -------------------------------------------------------------------

// Answer

// uint64 question_id = 1;
inline void Answer::clear_question_id() {
  question_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Answer::question_id() const {
  // @@protoc_insertion_point(field_get:message.Answer.question_id)
  return question_id_;
}
inline void Answer::set_question_id(::google::protobuf::uint64 value) {
  
  question_id_ = value;
  // @@protoc_insertion_point(field_set:message.Answer.question_id)
}

// uint32 selected_answer = 2;
inline void Answer::clear_selected_answer() {
  selected_answer_ = 0u;
}
inline ::google::protobuf::uint32 Answer::selected_answer() const {
  // @@protoc_insertion_point(field_get:message.Answer.selected_answer)
  return selected_answer_;
}
inline void Answer::set_selected_answer(::google::protobuf::uint32 value) {
  
  selected_answer_ = value;
  // @@protoc_insertion_point(field_set:message.Answer.selected_answer)
}

// uint64 sent_at = 3;
inline void Answer::clear_sent_at() {
  sent_at_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Answer::sent_at() const {
  // @@protoc_insertion_point(field_get:message.Answer.sent_at)
  return sent_at_;
}
inline void Answer::set_sent_at(::google::protobuf::uint64 value) {
  
  sent_at_ = value;
  // @@protoc_insertion_point(field_set:message.Answer.sent_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_message_2eproto
