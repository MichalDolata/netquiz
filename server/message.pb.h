// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_INCLUDED_message_2eproto
#define PROTOBUF_INCLUDED_message_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto 

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_message_2eproto
namespace message {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class SetPlayerName;
class SetPlayerNameDefaultTypeInternal;
extern SetPlayerNameDefaultTypeInternal _SetPlayerName_default_instance_;
}  // namespace message
namespace google {
namespace protobuf {
template<> ::message::Message* Arena::CreateMaybeMessage<::message::Message>(Arena*);
template<> ::message::SetPlayerName* Arena::CreateMaybeMessage<::message::SetPlayerName>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace message {

// ===================================================================

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  enum TypeCase {
    kSetPlayerName = 1,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .message.SetPlayerName set_player_name = 1;
  bool has_set_player_name() const;
  void clear_set_player_name();
  static const int kSetPlayerNameFieldNumber = 1;
  private:
  const ::message::SetPlayerName& _internal_set_player_name() const;
  public:
  const ::message::SetPlayerName& set_player_name() const;
  ::message::SetPlayerName* release_set_player_name();
  ::message::SetPlayerName* mutable_set_player_name();
  void set_allocated_set_player_name(::message::SetPlayerName* set_player_name);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:message.Message)
 private:
  void set_has_set_player_name();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::message::SetPlayerName* set_player_name_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetPlayerName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.SetPlayerName) */ {
 public:
  SetPlayerName();
  virtual ~SetPlayerName();

  SetPlayerName(const SetPlayerName& from);

  inline SetPlayerName& operator=(const SetPlayerName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetPlayerName(SetPlayerName&& from) noexcept
    : SetPlayerName() {
    *this = ::std::move(from);
  }

  inline SetPlayerName& operator=(SetPlayerName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPlayerName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPlayerName* internal_default_instance() {
    return reinterpret_cast<const SetPlayerName*>(
               &_SetPlayerName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SetPlayerName* other);
  friend void swap(SetPlayerName& a, SetPlayerName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetPlayerName* New() const final {
    return CreateMaybeMessage<SetPlayerName>(NULL);
  }

  SetPlayerName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetPlayerName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetPlayerName& from);
  void MergeFrom(const SetPlayerName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPlayerName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:message.SetPlayerName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// .message.SetPlayerName set_player_name = 1;
inline bool Message::has_set_player_name() const {
  return type_case() == kSetPlayerName;
}
inline void Message::set_has_set_player_name() {
  _oneof_case_[0] = kSetPlayerName;
}
inline void Message::clear_set_player_name() {
  if (has_set_player_name()) {
    delete type_.set_player_name_;
    clear_has_type();
  }
}
inline const ::message::SetPlayerName& Message::_internal_set_player_name() const {
  return *type_.set_player_name_;
}
inline ::message::SetPlayerName* Message::release_set_player_name() {
  // @@protoc_insertion_point(field_release:message.Message.set_player_name)
  if (has_set_player_name()) {
    clear_has_type();
      ::message::SetPlayerName* temp = type_.set_player_name_;
    type_.set_player_name_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::message::SetPlayerName& Message::set_player_name() const {
  // @@protoc_insertion_point(field_get:message.Message.set_player_name)
  return has_set_player_name()
      ? *type_.set_player_name_
      : *reinterpret_cast< ::message::SetPlayerName*>(&::message::_SetPlayerName_default_instance_);
}
inline ::message::SetPlayerName* Message::mutable_set_player_name() {
  if (!has_set_player_name()) {
    clear_type();
    set_has_set_player_name();
    type_.set_player_name_ = CreateMaybeMessage< ::message::SetPlayerName >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:message.Message.set_player_name)
  return type_.set_player_name_;
}

inline bool Message::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Message::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Message::TypeCase Message::type_case() const {
  return Message::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SetPlayerName

// string name = 1;
inline void SetPlayerName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetPlayerName::name() const {
  // @@protoc_insertion_point(field_get:message.SetPlayerName.name)
  return name_.GetNoArena();
}
inline void SetPlayerName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.SetPlayerName.name)
}
#if LANG_CXX11
inline void SetPlayerName::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.SetPlayerName.name)
}
#endif
inline void SetPlayerName::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.SetPlayerName.name)
}
inline void SetPlayerName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.SetPlayerName.name)
}
inline ::std::string* SetPlayerName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:message.SetPlayerName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetPlayerName::release_name() {
  // @@protoc_insertion_point(field_release:message.SetPlayerName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetPlayerName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:message.SetPlayerName.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_message_2eproto
